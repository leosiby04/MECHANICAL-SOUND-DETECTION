import librosa
import librosa.display
import numpy as np
import tensorflow as tf
import os
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

# Function to extract Mel Spectrogram features
def extract_features(file_path, n_mels=128):
    y, sr = librosa.load(file_path, sr=None)
    mel_spec = librosa.feature.melspectrogram(y=y, sr=sr, n_mels=n_mels)
    mel_spec_db = librosa.power_to_db(mel_spec, ref=np.max)
    return mel_spec_db

# Load dataset
DATASET_PATH = "./car_sounds"  # Folder containing car audio clips
labels = []
data = []
classes = os.listdir(DATASET_PATH)
class_map = {cls: i for i, cls in enumerate(classes)}

for cls in classes:
    cls_path = os.path.join(DATASET_PATH, cls)
    for file in os.listdir(cls_path):
        file_path = os.path.join(cls_path, file)
        feature = extract_features(file_path)
        data.append(feature)
        labels.append(class_map[cls])

# Convert to numpy array
data = np.array(data)
labels = np.array(labels)

# Reshape for CNN
X = data[..., np.newaxis]
y = tf.keras.utils.to_categorical(labels, num_classes=len(classes))

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# CNN Model
model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(X.shape[1], X.shape[2], 1)),
    MaxPooling2D((2,2)),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D((2,2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.3),
    Dense(len(classes), activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=20, batch_size=16, validation_data=(X_test, y_test))

# Save the model
model.save("car_audio_fault_model.h5")

# Predict function
def predict_audio(file_path):
    feature = extract_features(file_path)
    feature = feature[np.newaxis, ..., np.newaxis]
    prediction = model.predict(feature)
    return classes[np.argmax(prediction)]
